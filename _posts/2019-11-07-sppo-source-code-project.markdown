---
layout: post
title: "Проект исходного кода программного обеспечения"
---

Проект исходного кода ПО содержит в себе набор текстовых файлов, необходимых для сборки двоичного представления программы.
Сюда входят не только файлы с исходными кодами на выбранном языке программирования, но и документация, тесты, описание зависимостей собираемых компоннет, требования к внешней среде, описание для разных целевых платформ, отличающихся как используемым типом ОС (Windows, Linux, MacOS), их разрядностью (32, 64 бита), версией компилятора (gcc, clang, cl).

Ниже будут рассмотрены проекты только на языке программирования C++.
Структура проекта и его состав на других языках может отличаться.
Это связано с возможностями, которых нет в С++ -- поддержкой модулей, тестов, документирования на уровне синтаксиса или стандартных модулей.
C++ -- это язык программирования с многолетней историей, на котором разрабатываются сложные проекты -- операционные системы, СУБД, компиляторы -- состоящие из многих миллионов строк кода.

Рассматриваются только кросплатформенные проекты и проекты для Unix-подобных ОС.
Особенность этих проекто в том, что они не завязаны на конкретную интегрированную систему разработки и закрытые технологии сборки.
Это было бы, если проект создан только для использования MS Visual Studio.


# Исходный код программы

Программа может быть представлена двумя способами -- исходным и двоичным кодом.
Исходный код -- это текстовый файл, содержащий инструкции языка программирования, необходимых для преобразования данных из одного вида в другой.
Он пишется человеком и может быть понят другими людьми.
Для лучшего понимания, исходный код может содержать комментарии -- пояснения, не влияющие на логику программы.
Двоичный код программы -- это двоичный файл, который содержит инструкции процессора.
Двоичный код получается из исходного кода с помощью компилятора.
Компилятор преобразует текстовый файл, понятный человеку, в бинарный -- понятный машине.
Это преобразование называется трасляцией.
Обычная программа содержит не один файл исходного кода.
Каждый из них транслируется в двоичный код, называемый объектным файлом.
Далее эти файлы собираются в исполняемое приложение.
Создание исполняемого файла из исходного кода назовем *сборкой программы*. 


# Файловая структура проекта

В зависимости от сложности, проект может из одной или нескольких компонент.
Компонентой может быть или библиотека (статически или динамически компонуемая) или исполняемый файл.
Проект на диске состоит из набора файлов и вложенных каталогов, собранных в одном каталоге.
Типичный проект имеет устояшуюсья файловую структуру и содержит из каталогов с предопределенными названиями.

| .git (.hg)    | История системы контроля версий. |
| include/      | Интерфейсные заголовочные файлы. |
| src/          | Исходные коды проекта -- библиотек и приложений.|
| lib/          | Внешние библиотеки |
| doc/          | Документация к проекту. |
| test/         | Тестовые программы |
| data/         | Тестовые данные и данные, используемые компонентами. |
| bin/          | Каталог, куда помещаются собранные компоненты. |
| build/        | Сборочные скрипты. |
| license       | Описание лицензии проекта. |
| readme        | Введение в проект. |
| changelog     | Журнал с изменениями в проекте. |
| AUTHORS       | Список авторов, участвующих в создании проекта. |
| .clang-format | Требования к стилю исходного кода. |
| Dockerfile    | Инструкции для равертывания окружения для сборки. |


# Сборка программы из исходного кода

Средства языка C++ не позволяют формировать законченные модули.
Для этих целей используют инструменты для сборки программ.
Наиболее популярные из которых -- это CMake, make и autotools.

make -- это утилита, автоматизирующая процессы преобразования -- компиляции и компоновки программы.
Правила преобразования задаются в специальных файлах Makefile.
Утилита является основным средством сборки программ в ОС Unix.

Autotools -- это система сборки GNU для поддержки переносимости программ между Unix-подобными ОС.
В зависимости от дистрибутива ОС, компилятора, внешних компонент генерирует управляющие сборкой make-файлы.

CMake -- это кросплатформенная система сборки ПО из исходного кода.
Система самостоятельно программу не собирает, а создает управляющие сборкой файлы -- makefile в ОС Unix, проект Visual C++ в ОС Windows, проект XCode в Mac OS X.

В зависимости от используемой системы сборки, проект содержит файлы CMakeLists.txt (cmake), Makefile (make), configure (autotools).
Сборка проекта может выглядеть следующим образом:

```
./configure && make && make install
```

```
cmake . && cmake --build . --target=install
```

Проект соберется настройками по умолчанию.
При сборке проекта важна правильно настроенная ОС.
Она должна содержать компилятор, make, cmake и используемые проектом внешние компоненты, настроенные системные переменные.
Настройки подразумеваются неявно или они описаны в документации по сборке.
Иногда трудноуловимые ошибки в программе возникают из-за неверно настроенной ОС, сборки не с той внешней компонентой -- другой версии или собранной с другими флагами компиляции.
Чтобы не вносить такие ошибки, программу собирают в "чистой" среде.
Перед каждой сборкой эта среда воссоздается заново.
Это достигается виртуализацией окружения с помощью контейнера Docker.
Контейнер Docker предоставляет изолированное настроенное окружение.
Оно создается через специальный скриптовый файл Dockerfile и приложение docker.


# Система контроля версий

*Система контроля версий* -- это инструмент для облегчения работы с изменяющейся информацией.
При написании программы несколькими разработчиками изменения в проекте будут частыми и хаотичными.
В программу легко внести сложноуловимую ошибку, случайно удалить/затереть/потерять код.
Система контроля версий хранит несколько версий одного и того же документа.
К каждому изменению прилагается описание, время их совершения и имя автора.
Можно легко перейти к предыдущему состоянию документа , поддерживать несколько их версий.
Наибольшую популярность приобрели две распределенные системы -- hg и git.
В зависимости от используемой системы, в корневом каталоге проекта содержится каталог .hg или .git.
Он содержит историю изменения файлов.
*Репозиторий проекта* составляют файлы и история их изменений.

Для поддержания нескольких версий одного проекта, в системах контроля версий используется понятие ветки.
*Ветки* -- это разные варианты одного проекта.
Каждый разработчик, работая над проектом, может создать свою ветку, не затрагивая при этом стабильность основной программмы.
После того, как его работа над задачей закончилась, он *слияет* свою ветку с основной, выкладывая таким образом результат работы в проект.

~~Мультирепа, монорепа~~


# Стандарт оформления кода

*Стандарт оформления кода* -- это документ, который содержит набор правил и соглашений, используемых при написании исходного кода программы.
Поддержка единого стиля особенно важна в проектах, где работают несколько разработчиков.
Код, имеющий единый стиль оформления, проще изучать и модифицировать.

Стандарт оформления зависит от языка программирования, от проекта, от организации.
Пример стандартов:
1. K&R, стандарт кодирования на C от Кернигана и Ритчи.
2. Стандарт кодирования GNU.
3. Стандарт кодирования на С++ для проектов Google.
4. Рекомендации оформления кода C+ от Microsoft.
5. Java от Sun.

Обычно в стандарт включают следующие требования:
1. Оформление отступов табуляцией или пробелами.
2. Ширина отсупа -- 2 или 4 пробела.
3. Оформление имен типов, классов, полей и методов классов, функций, констант, препроцессорных макросов, локальных, глобальных и статических переменных.
Использование подчеркиваний, префиксов, регистров символов, глаголов/существительных в названиях.
4. Способ расстановки скобок логических блоков.
5. Стиль комментариев внутри кода и документирующих комментариев.
6. Ограничение размера кода по горизонтали и вертикали.
7. Количество пустых строк между функциями, классами, методами класса, их реализациями.

В некоторых языках программирования стандарт оформления кода внедрен на уровне синтаксиса.
При нарушении этих правил программа просто не соберется.
Примерами являются отсутпы в Python, положение фигурных скобок в Go, префиксы и регистры букв для типов, констант, переменных и полей классов в Ruby.

В оформлении кода немалую помощь дают текстовые редакторы и среды разработки.
Это такие настройки как сохранение или замена знака табуляции на заданное количество пробелов, автоматическое форматирование частей кода, выбор предпопределенного стандарта оформления.

# Документация

Проект ПО должен содержать необходимую информацию для его сопровождения и использования.
В корне проекта обычно располагаются файлы readme, где указана общая информация о проекте и ссылки на подробную информацию.
Внутри проекта также содержится информация об используемой лицензии, внешние зависимости, как собрать проект, структура проекта, информация об осноных разработчиках.

Для оформления документации используются облегченный язык разметки markdown (расширение файла .md) и reStructuredText (.rst).
Разметка позволяет, испольузя простой текстовый редактор, выделять заголовки, списки, изменять текст курсивом, полужирным начертанием, вставлять математические формулы, рисунки, таблицы и т.п.

С помощью документирующих комментариев прямо в исходном можно вставлять описания к функциям, классам, методам класса.
Затем с помощью специальной программы -- генератора документации -- создать документ в форматах html, man, pdf и других.
Документация непосредственно в исходном коде более эффективна, чем в отдельном документе.
Это связано с легкой синхронизацией текста, при изменении прототипа функции или ее поведения, так как текст располагается рядом с изменившейся функцией.

Doxygen -- генератор документации по исходным кодам.
Документация может быть создана в форматах html, latex, man, xml, rtf.
Из latex может быть получен pdf.


# Тестирование

Внутри проекта располагаются каталог с тестами и данными к ним -- `test/` и `data/`.
Обычно это модульные тесты.
Модульное тестирование -- это процесс в программировании, позволяющий проверить на корректность единицы исходного кода -- функции, классы и их методы.
Созданием модульных тестов занимается разработчик.
Их достаточное количество позволяет выполнить рефакторинг кода -- изменение кода с целью его упрощения без изменения поведения программы.
Модульные тесты отлавливают регрессионные ошибки -- ошибки, возникающие в программе после внесения нового кода.

Инструмент для удобного создания, запуска и отладки модульных тестов -- Google C++ Testing Framework.

В других случаях тестом является функция main, возвращающая код ошибки.


# Управление внешними зависимостями

Сложные программы имеют зависимости от сторонних компонент -- библиотек графического интерфейса (Qt, GTK, wxWidgets); вспомогательных библиотек, расширяющих возможности языка программирования (boost, стандартная библиотека C++); узкоспециализированных библиотек (libcurl для скачивания файлов, libssh2 для шифрования).
Разработка программы полностью на своих компонентах неэффективно, особенно если их предметные области не входят в сферу компетенции разработчиков.

Внешние компоненты не входят в состав проекта и должны быть установлены перед его сборкой.
К ним предъявляются требования двоичной совместимости интерфейсов.
Это означает, что компоненты должны быть собраны на той же ОС и тем же компилятором, что и проект.
Существует два способа подготовить внешние компоненты -- пакетным менеджером или системой сборки.
Рассмотрим каждый из них.

*Пакетный менеджер* -- это набор программ, управляющий прцоессом установки, удаления, обновления компонент ПО.
Существуют различные виды пакетных менеджеров, отличающихся типом ОС и языком программирования, для использования в которых предназначаются пакеты.
Наиболее популярные -- это dpkg, apt, rpm, для Unix-подобных ОС, pip для пакетов python, NuGet для пакетов .NET Framework.
Пакеты хранятся в репозиториях, которые могут быть как удаленными, так и локальными.
Если в проекте внешние компоненты устанавливаются через пакетный менеджер, то в документе по сборке проекта прилагаются инструкции по их установке.
Обычно для установки пакетов нужны привилегии администратора.

Подготовка внешних компонент системой сборки CMake основывается на двух способах -- поиск ранее установленных компонент или скачивание архивов/исходных кодов и их распаковка/сборка.
Поиск выполняется функциями find_module, find_library, find_file.
Обычно эти функции реализованы для широкораспространенных открытых компонент и входят в поставку CMake.
Если они не входят в поставку, то возможно, прилагаются к проектам этих компонент.
Модуль ExternalProject CMake позволяет скачивать внешние компоненты, представленные в виде архива или проекта git, hg.
Скачанный проект распаковывается, собирается, тестируется и инсталлируется в систему.
Пути к заголовочным и библиотечным файлам передаются в исходный проект.

Иногда бывает возможным собрать проект без некоторых внешних компонент.
Такая возможность задается через задается через настройки -- конфигурацию проекта, выполняющаяся перед сборкой.
На этапе конфигурации проекта определяется компилятор, пути к результирующим файлам, тип библиотеки (динамически или статически компонуемая), версии используемых внешних компонент.

