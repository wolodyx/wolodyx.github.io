---
layout: post
title: "СППО. Удаленное обучение"
---

В связи с введением карантина в институте обучение стало удаленным.
По плану у нас лекция на тему ["Большие данные"](https://docs.google.com/document/d/1lwSSIB5eoec8G4P9olfG8iHG8rf1tU2bIxQa9cwzClw/edit?usp=sharing).
Черновой вариант лекции, со временем будет редактироваться.

# Практические занятия

На данный момент у всех задание одинаковое - выкладываете свои наработки как проект на сайт GitHub.com и скидываете мне ссылку на проект через мессенджер (Telegram, WhatsApp или Viber).

Результатом практических занятий должен быть публичный проект на GitHub. Проект содержит:

* исходные коды;
* описание используемых технологий;
* инструкции для демонстрации работы.

## Создание репозитория на GitHub.com

Для создания репозитория вашего проекта, необходимо выполнить следующие действия. Для более глубокого понимания команд git, предлагаю изучить учебник [Pro Git](https://github.com/downloads/GArik/progit/progit.ru.pdf), главы с 2.1 по 2.4.

* Создайте пустой проект на GitHub.com. Для этого перейдите к списку репозиториев и нажмите на кнопку `New`. Репозиторий должен быть общедоступным (свойство `Public`), иметь описание (свойство `Description`), добавьте файл `README` (включите галку `Initialize this repository with a README`).
* В рабочем каталоге вашей рабочей машины создайте каталог с названием проекта.
* Скачайте созданный репозиторий на рабочую машину командой `git clone <Ссылка_на_ваш_репозиторий> .`. Вызовите команду на текущем каталоге проекта и не забудьте скопировать точку в конце команды!
* Скиньте файлы вашего проекта в каталог с проектом.
* Сформируйте индекс - список файлов для их фиксирования в репозитории. Чтобы добавить файл в индекс выполните команду `git add <file>`. Для просмотра содержимого индекса выполните команду `git status`
* Зафиксируйте индекс командой `git commit -m"Init repository"`.
* Выложите изменения на GitHub командой `git push`.

# Проекты

1. WebAssembly. Разработать пример, демонстрирующий возможности технологии WebAssembly.

2. WebGL. Разработать пример, демонстрирующий возможности технологии WebGL.

3. WebSocket. Разработать пример, демонстрирующий возможности технологии WebSocket. Развернуть сервер, написать серверную и клиентскую программы.

4. Html, jQuery и CSS для выборки и оформления данных. Формируется html-страничка с тремя или более таблицами. В каждой таблице более 100 строк. В страницу добавляется набор фильтров -- условия для выборки данных из таблиц, демонстрируются возможности по изменению внешнего вида таблиц, строк, столбцов и данных.

5. Доступ к геометрической модели через API САПР.
САПР выбирается [Компас3D](https://kompas.ru) -- учебная, урезанная или демонстрационная версии.
Язык программирования -- C++.

6. Docker-виртуализация. Разработать скрипт, разворачивающий окружение для сборки и тестирования проекта из Github.

7. Сбор данных из открытых источников и их анализ. Программа пишется на языке программирования Python. Сбор данных выполняется также и на ресурсах с авторизацией. Для анализа и визуализации можно использовать [matplotlib](https://matplotlib.org/), [networkx](https://networkx.github.io/), [pandas](https://pandas.pydata.org/). Анализ выполняется для научных данных -- публикаций по определенной теме. Как пример, можно посмотреть статью [«Пандемия» научных публикаций о COVID-19](https://habr.com/ru/post/493512/).

8. Генератор статических сайтов [Jekyll](https://jekyllrb.com/). Создать свой шаблон оформления сайта, который заменит встроенный `minima`.

9. Простой шаблонизатор для Python. Изучить статью [Approach: Building a toy template engine in Python](http://alexmic.net/building-a-template-engine/) или его перевод [Пишем свой шаблонизатор на Python](https://habr.com/en/post/180935/). Дополнить существующий шаблонизатор возможностью обрабатывать вложенные циклы.

